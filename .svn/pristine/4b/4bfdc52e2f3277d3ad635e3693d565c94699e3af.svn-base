package cn.com.taiji.sample.manager.system;

import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import cn.com.taiji.common.manager.AbstractManager;
import cn.com.taiji.common.model.dao.Pagination;
import cn.com.taiji.common.pub.TimeTools;
import cn.com.taiji.sample.entity.SystemLog;
import cn.com.taiji.sample.model.echart.AxisKeyValue;
import cn.com.taiji.sample.model.echart.AxisTimeSplitter;
import cn.com.taiji.sample.model.echart.AxisTimeUnit;
import cn.com.taiji.sample.model.echart.ChartData;
import cn.com.taiji.sample.model.echart.ChartDataBuilder;
import cn.com.taiji.sample.model.echart.ChartSerie;
import cn.com.taiji.sample.model.echart.SingleChartDataBuilder;
import cn.com.taiji.sample.repo.jpa.SystemLogRepo;
import cn.com.taiji.sample.repo.jpa.UserRepo;
import cn.com.taiji.sample.repo.request.system.SystemLogPageRequest;

/**
 * 
 * @author Peream <br>
 *         Create Time：2011-5-20 下午03:05:30<br>
 *         <a href="mailto:peream@gmail.com">peream@gmail.com</a>
 * @since 1.0
 * @version 1.0
 */
@Service("systemLogManager")
public class SystemLogManagerImpl extends AbstractManager implements SystemLogManager
{
	@Autowired
	private SystemLogRepo logRepo;
	@Autowired
	private UserRepo userRepo;

	@Override
	@Transactional
	public String add(SystemLog log)
	{
		log.setUser(userRepo.findOne(log.getUser().getId()));
		logRepo.save(log);
		return log.getId();
	}

	@Override
	public Pagination queryPage(SystemLogPageRequest req)
	{
		return logRepo.page(req);
	}

	@Override
	public ChartData  multiGroup(){
		Calendar endTime=TimeTools.getCalendar("yyyyMMddHHmmss", "20160309235959");
		Calendar beginTime=(Calendar) endTime.clone();
		beginTime.add(Calendar.DATE, -8);
		beginTime.add(Calendar.SECOND, 1);
		/*
		time			userid						count(*)
		20160302	9bf98b04418e42beac464c484db5d995	4
		20160302	admin	12
		20160303	9bf98b04418e42beac464c484db5d995	2
		20160303	admin	12
		20160304	admin	11
		20160307	9bf98b04418e42beac464c484db5d995	1
		20160307	admin	5
		20160308	admin	2
		20160309	9bf98b04418e42beac464c484db5d995	1
		20160309	admin	15
		*/
		List<Object[]> list = logRepo.groupStat(beginTime,endTime,Arrays.asList("admin","9bf98b04418e42beac464c484db5d995"));
		//用java代码按userid再分组，图表中每个user为一个serie
		Map<String,List<AxisKeyValue>>  map=list.stream().collect(Collectors.groupingBy(os->String.valueOf(os[1]),
				Collectors.mapping(os->new AxisKeyValue(os[0],os[2]),Collectors.toList())));
		ChartDataBuilder  builder=new ChartDataBuilder(new ChartData());
		//设置图例
		builder.setLegend(Arrays.asList("admin","ccc"));
		//按天分割好时间序列
		builder.setxAxisSpliter(AxisTimeSplitter.of(beginTime, endTime,AxisTimeUnit.DAY).setFormat("yyyyMMdd"));
		//设置y轴数值范围，一般不需要
		builder.setyAxisRange(0, 20);
		//给某天没有数据的填充0
		builder.addSerieWithFill(new ChartSerie("admin","line"),map.get("admin"), 0);
		builder.addSerieWithFill(new ChartSerie("ccc","line"),map.get("9bf98b04418e42beac464c484db5d995"), 0);
		return builder.toChartData();
	}
	
	@Override
	public ChartData  singleGroup(){
		Calendar beginTime=Calendar.getInstance();
		beginTime.add(Calendar.MONTH, -1);
//		loginName,count
		List<AxisKeyValue> list = logRepo.groupStat(beginTime).stream().map(os->new AxisKeyValue(os[0], os[1])).collect(Collectors.toList());
		SingleChartDataBuilder  builder=new SingleChartDataBuilder(list,"用户操作次数","bar");
		builder.setTitle(toLogString("月用户操作日志排行({}起)", TimeTools.toDayStr(beginTime)));
		return builder.toChartData();
	}
}
