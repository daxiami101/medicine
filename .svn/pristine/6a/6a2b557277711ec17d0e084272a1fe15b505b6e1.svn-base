package cn.com.taiji.sample.web.template;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import cn.com.taiji.common.manager.ManagerException;
import cn.com.taiji.common.manager.net.http.HttpMimeResponseHelper;
import cn.com.taiji.common.model.LabelIdPair;
import cn.com.taiji.common.pub.json.JsonTools;
import cn.com.taiji.sample.entity.Template;
import cn.com.taiji.sample.manager.template.TemplateManager;
import cn.com.taiji.sample.repo.request.acl.TemplatePageRequest;
import cn.com.taiji.sample.web.BaseLogController;

@Controller("templateController")
@RequestMapping("/template")
public class TemplateController extends BaseLogController
{

	@Autowired
	private TemplateManager templateManager;
	private final String prefix = "template/";
	
	@RequestMapping(value = "/manage", method = RequestMethod.GET)
	public String manageGet(@ModelAttribute("queryModel") TemplatePageRequest req, Model model, HttpServletRequest request)
	{
		return prefix + "manage";
	}

	@RequestMapping(value = "/manage", method = RequestMethod.POST)
	public String managePost(@Valid @ModelAttribute("queryModel") TemplatePageRequest req, Model model)
	{
		model.addAttribute("pagn", templateManager.queryPage(req));
		return prefix + "queryResult";
	}
	
	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String setupAdd(@ModelAttribute("pageModel") TemplatePageRequest req, Model model)
	{
		return prefix + "add";
	}

	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String processAdd(@ModelAttribute("pageModel") TemplatePageRequest req, Model model, 
			HttpServletRequest request,	HttpServletResponse response) throws ManagerException, IOException
	{
		
		Template template = templateManager.add(req);
		// 添加日志
		super.addSysLog(request, "添加模板({})成功", req.getName());
		addSuccess(response, "添加成功！");
		model.addAttribute("vo", template);
		return prefix + "result";

	}
	
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String setupEdit(@PathVariable("id") String id, Model model,
			@ModelAttribute("pageModel") Template pageModel)
	{
		Template template = templateManager.findById(id);
		String fileName = template.getName();
		template.setName(fileName.substring(0, fileName.lastIndexOf(".")));
		model.addAttribute("pageModel", template);
		return prefix + "edit";
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	public String processEdit(@ModelAttribute("pageModel") Template pageModel, HttpServletRequest request, Model model,
			HttpServletResponse response) throws ManagerException
	{
		Template template = templateManager.edit(pageModel);
// 		添加日志
		super.addSysLog(request, "修改模板({})成功", template.getName());
		addSuccess(response, "修改成功！");
		model.addAttribute("vo", template);
		return prefix + "result";
	}
	
	
	@RequestMapping("/listByProjectName")
	public void getAll(@RequestParam("projectId") String projectName, HttpServletResponse response) throws IOException
	{
		logger.debug(projectName);
		List<LabelIdPair> pairs = LabelIdPair.fromList(templateManager.listByName(projectName), "name", "id");
		super.responseJson(JsonTools.toJsonStr(pairs), response);
	}
	
	@RequestMapping(value = "/download/{id}")
	public void download(@PathVariable("id") String id, HttpServletRequest request, 
			HttpServletResponse response, Model model) throws ManagerException
	{
		Template template = templateManager.findById(id);
		if (template == null) throw new ManagerException("模板不存在");
		try {
			HttpMimeResponseHelper.doDownLoad(request, response, new File(template.getPath()), template.getName());
		} catch (IOException e) {
			e.printStackTrace();
			throw new ManagerException("模板不存在");
		}
	}
	
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.POST)
	public void delete(@PathVariable("id") String id, Model model, HttpServletResponse response, HttpServletRequest request) throws ManagerException
	{
		Template template = templateManager.delete(id);
//		添加日志
		super.addSysLog(request, "删除模板({})成功", template.getName());
		addSuccess(response, "删除成功！");
	}

}
