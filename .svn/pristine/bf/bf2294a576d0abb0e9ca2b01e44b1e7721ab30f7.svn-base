package cn.com.taiji.sample.web.plan;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import model.PlanExportModel;
import model.PlanModel;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import cn.com.taiji.common.manager.JsonManagerException;
import cn.com.taiji.common.manager.ManagerException;
import cn.com.taiji.common.manager.net.http.HttpMimeResponseHelper;
import cn.com.taiji.common.model.LabelIdPair;
import cn.com.taiji.common.pub.json.JsonTools;
import cn.com.taiji.common.validation.MyViolationException;
import cn.com.taiji.sample.entity.Plan;
import cn.com.taiji.sample.entity.PlanContent;
import cn.com.taiji.sample.entity.Project;
import cn.com.taiji.sample.entity.User;
import cn.com.taiji.sample.entity.dict.CompleteStatus;
import cn.com.taiji.sample.entity.dict.PlanType;
import cn.com.taiji.sample.manager.LoginHelper;
import cn.com.taiji.sample.manager.acl.UserManager;
import cn.com.taiji.sample.manager.plan.PlanManager;
import cn.com.taiji.sample.manager.workPlan.ProjectManger;
import cn.com.taiji.sample.repo.request.plan.PlanPageRequest;
import cn.com.taiji.sample.web.BaseLogController;

/**
 * 
 * @author Peream <br>
 *         Create Time：2011-5-30 上午10:08:19<br>
 *         <a href="mailto:peream@gmail.com">peream@gmail.com</a>
 * @since 1.0
 * @version 1.0
 */
@Controller
@RequestMapping("/plan")
public class PlanController extends BaseLogController
{
	@Autowired
	private PlanManager planManager;
	@Autowired
	private UserManager userManager;
	
	@Autowired
	private ProjectManger projectManger;
	
	private final String prefix = "plan/";

	@RequestMapping(value = "/manage", method = RequestMethod.GET)
	public String manageGet(@ModelAttribute("queryModel") PlanPageRequest req, Model model, HttpServletRequest request)
	{
		model.addAttribute("projects", planManager.getAll());
		model.addAttribute("planTypes", PlanType.values());
		return prefix + "manage";
	}

	@RequestMapping(value = "/manage", method = RequestMethod.POST)
	public String managePost(@Valid @ModelAttribute("queryModel") PlanPageRequest req,HttpServletRequest request, Model model)
	{
		model.addAttribute("pagn", planManager.queryPage(req));
		return prefix + "queryResult";
	}
	
	@RequestMapping("/allProjects")
	public void listByName(@RequestParam("projectId") String name, HttpServletRequest request,HttpServletResponse response) throws IOException
	{
		List<LabelIdPair> pairs = LabelIdPair.fromList(planManager.findProjectByName(name), "name", "id");
		super.responseJson(JsonTools.toJsonStr(pairs), response);
	}
	
	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String setupAdd(@ModelAttribute("pageModel") Plan plan,HttpServletRequest request, Model model)
	{
		model.addAttribute("users", planManager.getAllUser());
		model.addAttribute("projects", planManager.getAll());
		model.addAttribute("planTypes", PlanType.getDevelopType());
		return prefix + "add";
	}

	
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String processAdd(@Valid @ModelAttribute("pageModel") Plan plan, HttpServletRequest request, Model model,
			HttpServletResponse response) throws JsonManagerException, IOException, ManagerException
	{
		User loginUser=LoginHelper.getLoginUser(request);
		Plan po =planManager.addBatch(plan, loginUser,request);
		addSuccess(response, "添加计划成功");
		model.addAttribute("vo", po);
		return prefix + "result";
	}
	
	@RequestMapping(value = "/addContent/{id}", method = RequestMethod.GET)
	public String setupAddCentent(@PathVariable("id") String id,@Valid @ModelAttribute("pageModel") PlanContent planContent,HttpServletRequest request, Model model)
	{
		model.addAttribute("users", planManager.getAllUser());
		model.addAttribute("planTypes", PlanType.getDevelopType());
		model.addAttribute("planId", id);
		return prefix + "addContent";
	}

	
	@RequestMapping(value = "/addContent", method = RequestMethod.POST)
	public String processAddCentent(@Valid @ModelAttribute("pageModel") PlanContent planContent, HttpServletRequest request, Model model,
			HttpServletResponse response) throws JsonManagerException, IOException, ManagerException
	{
		User loginUser=LoginHelper.getLoginUser(request);
		Plan po =planManager.addContent(planContent, loginUser,request);
		addSuccess(response, "添加计划成功");
		model.addAttribute("vo", po);
		return prefix + "result";
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String setupEdit(@PathVariable("id") String id, HttpServletRequest request,Model model) throws IOException
	{
		PlanModel planModel=planManager.findById(id);
		Plan plan=planModel.getPlan();
		Project project=plan.getProject();
		model.addAttribute("users", planManager.getAllUser());
		model.addAttribute("projectName", project.getName());
		model.addAttribute("projects", planManager.getAll());
		model.addAttribute("planTypes", PlanType.getDevelopType());
		model.addAttribute("pageModel",planModel);
		return prefix + "edit";
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	public String processEdit(@Valid @ModelAttribute("pageModel") PlanModel planModel, HttpServletRequest request, Model model,
			HttpServletResponse response) throws JsonManagerException, IOException, ManagerException
	{
		Plan po = planManager.update(planModel,request);
		addSuccess(response, "修改计划成功");
		model.addAttribute("vo", po);
		return prefix + "result";
	}

	@RequestMapping(value = "/view/{id}")
	public String view(@PathVariable("id") String id, Model model)
	{
		model.addAttribute("pageModel", planManager.findById(id));
		return prefix + "view";
	}
	
	@RequestMapping(value = "/complete/{id}", method = RequestMethod.GET)
	public String setupComplete(@PathVariable("id") String id, HttpServletRequest request,Model model)
	{
		User loginUser=LoginHelper.getLoginUser(request);
		model.addAttribute("statuses", CompleteStatus.values());
		model.addAttribute("pageModel", planManager.findByIdAndUser(id,loginUser));
		return prefix + "completes";
	}

	@RequestMapping(value = "/complete", method = RequestMethod.POST)
	public String processComplete(HttpServletRequest request, Model model,
			HttpServletResponse response) throws IOException, ManagerException
	{
		Plan po=planManager.complete(request);
		addSuccess(response, "回复完成进度情况成功");
		model.addAttribute("vo", po);
		return prefix + "result";
	}
	
	@RequestMapping(value = "/toExport", method = RequestMethod.GET)
	public String setExport(@ModelAttribute("pageModel") Plan plan,HttpServletRequest request, Model model)
	{
//		model.addAttribute("roles", roleManager.getAll(LoginHelper.getLoginUser(request)));
		model.addAttribute("projects", planManager.getAll());
		return prefix + "export";
	}
	
	@RequestMapping(value = "/export/{projectId}/{date}", method = RequestMethod.GET)
	public void processExport(@Valid @ModelAttribute("pageModel") Plan plan,@PathVariable("projectId") String projectId,@PathVariable("date") String date, HttpServletRequest request, Model model,
			HttpServletResponse response) throws Exception
	{
		File file = planManager.export(projectId,date);
		Project project = projectManger.findById(projectId);
		plan= planManager.findByProject(project, date);
		try
		{
			addSuccess(response, "下载成功");
			HttpMimeResponseHelper.doDownLoad(request, response, file, project.getName()+"--施工日志--"+(String.format("%03d", plan.getList()))+".doc");
		}
		catch (IOException e)
		{
			logger.error(e.getMessage());
			logger.warn("取消下载或者下载中断");
		}
		finally
		{
			if (!file.delete()) logger.warn("delete pdf file failed:{}", file.getAbsolutePath());
		}
//		return prefix + "result";
	}
	
	@RequestMapping(value = "/validateExport", method = RequestMethod.POST)
	public void validateExport(@Valid @ModelAttribute("pageModel") PlanExportModel exportModel, HttpServletRequest request, Model model,
			HttpServletResponse response) throws JsonManagerException, ManagerException
	{
		if (!hasText(exportModel.getProjectId())) throw new MyViolationException("projectId", "不能为空");
		Project project = projectManger.findById(exportModel.getProjectId());
		Plan plan= planManager.findByProject(project, exportModel.getDate());
		if(plan==null) throw new ManagerException("该项目在所选日期没有填报计划");
		addSuccess(response, "成功");
	}
}
